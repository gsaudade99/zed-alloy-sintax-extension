
# docs/alloy-hover.toml
# Key = identifier text you hover (component names, attributes, funcs, etc.)
# Value = Markdown shown in Zed's hover popup.

# ── Components (Discovery) ────────────────────────────────────────────────────
"discovery.kubernetes" = """
**discovery.kubernetes**
Discovers scrape targets from Kubernetes resources (Pods, Services, Endpoints, Nodes, Ingress, etc.).
Defaults to in-cluster auth if no kubeconfig is provided. Useful inputs to `prometheus.scrape`.
**Exports:** `targets`.
"""

"discovery.kubelet" = """
**discovery.kubelet**
Discovers kubelets and their metrics endpoints across a Kubernetes cluster.
Often used to scrape node/cAdvisor metrics.
**Exports:** `targets`.
"""

"discovery.file" = """
**discovery.file**
Loads targets from one or more JSON files on disk and keeps them in sync.
Great for static target lists generated by scripts.
**Exports:** `targets`. **Key attr:** `files`.
"""

"discovery.http" = """
**discovery.http**
Fetches a list of targets from an HTTP endpoint (returns JSON target lists).
Handy for pluggable, external service discovery.
**Exports:** `targets`. **Key attrs:** `url`, `method`, `headers`.
"""

"discovery.docker" = """
**discovery.docker**
Discovers containers from a Docker daemon and turns networks/ports into scrape targets.
**Exports:** `targets`. Useful for metrics and log pipelines.
"""

"discovery.dockerswarm" = """
**discovery.dockerswarm**
Discovers Swarm **services** or **tasks** and exposes published ports as targets
(or one target per service/task when no published ports).
**Exports:** `targets`.
"""

"discovery.consul" = """
**discovery.consul**
Discovers services via Consul **Catalog API**.
**Exports:** `targets`. **Typical attr:** `server`.
"""

"discovery.consulagent" = """
**discovery.consulagent**
Discovers services registered to the **local Consul agent** (Agent API).
Good for very large clusters where Catalog can be too heavy.
**Exports:** `targets`.
"""

"discovery.ec2" = """
**discovery.ec2**
Discovers EC2 instances as targets (uses private IP by default; switch via relabeling).
Requires IAM permission `ec2:DescribeInstances` (and optionally `ec2:DescribeAvailabilityZones`).
**Exports:** `targets`.
"""

"discovery.azure" = """
**discovery.azure**
Discovers Azure Virtual Machines and exposes them as targets.
**Exports:** `targets`.
"""

"discovery.gce" = """
**discovery.gce**
Discovers Google Compute Engine instances and exposes them as targets.
**Exports:** `targets`.
"""

"discovery.digitalocean" = """
**discovery.digitalocean**
Discovers DigitalOcean Droplets and exposes them as targets.
Auth via bearer token or token file.
**Exports:** `targets`.
"""

"discovery.nomad" = """
**discovery.nomad**
Discovers targets from Nomad’s Service API.
**Exports:** `targets`.
"""

"discovery.nerve" = """
**discovery.nerve**
Discovers services registered by **Nerve** via ZooKeeper paths.
**Key attrs:** `paths`, `servers`. **Exports:** `targets`.
"""

"discovery.relabel" = """
**discovery.relabel**
Filters/normalizes discovered targets via **relabeling rules** before scraping.
Common uses: keep/drop targets, rewrite `__address__`, add labels, etc.
**Exports:** `targets`. **Key block:** `rule` (repeatable).
"""

"discovery.process" = """
**discovery.process**
Discovers processes on the local Linux OS (requires root and host PID namespace).
**Exports:** `targets` with process metadata.
"""

# ── Components (Prometheus: Scrape / Remote Write / Relabel) ──────────────────
"prometheus.scrape" = """
**prometheus.scrape**
Scrapes metrics from `targets` and forwards them to `forward_to` receivers.
Defaults: `scrape_interval="60s"`, `scrape_timeout="10s"`, `metrics_path="/metrics"`.
**Key attrs:** `targets`, `forward_to`, `params`, `scheme`, `scrape_protocols`, `honor_labels`.
Special labels understood: `__address__`, `__metrics_path__`, `__scheme__`, `__param_<name>`.
"""

"prometheus.remote_write" = """
**prometheus.remote_write**
Forwards Prometheus samples to a remote backend. Configure one or more `endpoint { ... }` blocks.
**Endpoint attrs:** `url`, auth (`basic_auth` / `bearer_token(_file)` / `oauth2` / `authorization`), plus TLS/proxy/retry settings.
**Exports:** `receiver`.
"""

"prometheus.relabel" = """
**prometheus.relabel**
Applies Prometheus **metric relabeling** rules after scraping (rename, keep/drop, hashmod, replace).
Use to sanitize/standardize label sets before remote write.
**Key block:** `rule` (repeatable).
"""

"prometheus.receive_http" = """
**prometheus.receive_http**
Receives Prometheus remote write over HTTP and exposes a **MetricsReceiver** export for downstream components.
Useful for accepting metrics from Prometheus/Alloy agents.
**Exports:** `receiver`.
"""

"prometheus.write.queue" = """
**prometheus.write.queue**
Configures a shared remote-write queue for multiple writers. Tune buffering and retry behavior centrally.
"""

# ── Components (Prometheus: Exporters) ────────────────────────────────────────
"prometheus.exporter.apache" = """
**prometheus.exporter.apache**
Embeds **apache_exporter** to collect metrics from Apache HTTPD `mod_status`.
Ensure `mod_status` is enabled and reachable.
**Exports:** `targets`. **Common args:** status URL(s), auth if needed.
"""

"prometheus.exporter.azure" = """
**prometheus.exporter.azure**
Embeds **azure_metrics_exporter** to pull Azure Monitor metrics.
**Common args:** subscription/tenant/client credentials, `resource_discovery` or static resources.
**Exports:** `targets`.
"""

"prometheus.exporter.blackbox" = """
**prometheus.exporter.blackbox**
Embeds **blackbox_exporter** for HTTP/HTTPS/TCP/ICMP probes.
**Common args:** `modules` definitions; probe targets normally provided via `prometheus.scrape` params.
**Exports:** `targets` (scrape the exporter), then probe via query params.
"""

"prometheus.exporter.cadvisor" = """
**prometheus.exporter.cadvisor**
Runs **cAdvisor** to expose container and cgroup metrics from the host.
**Exports:** `targets`. Often combined with `prometheus.scrape` on the returned target.
"""

"prometheus.exporter.catchpoint" = """
**prometheus.exporter.catchpoint**
Embeds Catchpoint exporter to expose digital experience metrics pulled from Catchpoint APIs.
**Common args:** API credentials, test filters.
**Exports:** `targets`.
"""

"prometheus.exporter.cloudwatch" = """
**prometheus.exporter.cloudwatch**
Embeds **yet-another-cloudwatch-exporter** to translate AWS CloudWatch metrics.
Supports **discovery** and **static** jobs; map namespaces/metrics to Prometheus.
**Common args:** AWS credentials/role, job configs.
**Exports:** `targets`.
"""

"prometheus.exporter.consul" = """
**prometheus.exporter.consul**
Embeds **consul_exporter** to expose Consul server and catalog metrics.
**Exports:** `targets`. **Common args:** Consul server address, token.
"""

"prometheus.exporter.dnsmasq" = """
**prometheus.exporter.dnsmasq**
Embeds **dnsmasq_exporter** to expose metrics from a dnsmasq instance.
**Exports:** `targets`. **Common args:** address of dnsmasq, leases path if required.
"""

"prometheus.exporter.elasticsearch" = """
**prometheus.exporter.elasticsearch**
Embeds **elasticsearch_exporter** to collect Elasticsearch cluster/node/index metrics.
**Exports:** `targets`. **Common args:** ES base URL, auth, TLS.
"""

"prometheus.exporter.gcp" = """
**prometheus.exporter.gcp**
Embeds **stackdriver_exporter** to collect Google Cloud Monitoring metrics.
Metric names follow `stackdriver_<resource>_<metric_type_prefix>_<metric_type>`.
**Exports:** `targets`. **Common args:** project/credentials, metrics filters.
"""

"prometheus.exporter.github" = """
**prometheus.exporter.github**
Embeds **github_exporter** to expose repository/org metrics via GitHub APIs.
**Exports:** `targets`. **Common args:** token, orgs/repos list, rate limit tuning.
"""

"prometheus.exporter.kafka" = """
**prometheus.exporter.kafka**
Embeds Kafka exporter to expose metrics for Kafka brokers, topics, consumer lag, etc.
**Exports:** `targets`. **Common args:** `kafka_uris`, SASL/TLS auth if needed.
"""

"prometheus.exporter.memcached" = """
**prometheus.exporter.memcached**
Embeds **memcached_exporter** for Memcached stats.
**Exports:** `targets`. **Common args:** memcached address, timeout.
"""

"prometheus.exporter.mongodb" = """
**prometheus.exporter.mongodb**
Embeds **mongodb_exporter** for MongoDB server/replica set/cluster metrics.
**Exports:** `targets`. **Common args:** connection URI, TLS/auth.
"""

"prometheus.exporter.mssql" = """
**prometheus.exporter.mssql**
Embeds **sql_exporter** to collect stats from Microsoft SQL Server.
**Key attr:** `connection_string`. **Exports:** `targets`.
"""

"prometheus.exporter.mysql" = """
**prometheus.exporter.mysql**
Embeds **mysqld_exporter** to collect MySQL server metrics.
**Common args:** DSN / address & credentials; optional collector toggles.
**Exports:** `targets`.
"""

"prometheus.exporter.oracledb" = """
**prometheus.exporter.oracledb**
Embeds **oracledb_exporter** to collect metrics from Oracle Database.
**Key attr:** `connection_string` (EZCONNECT or TNS). **Exports:** `targets`.
"""

"prometheus.exporter.postgres" = """
**prometheus.exporter.postgres**
Embeds **postgres_exporter** to collect PostgreSQL metrics.
**Common args:** connection string/DSN, optional database include/exclude.
**Exports:** `targets`.
"""

"prometheus.exporter.process" = """
**prometheus.exporter.process**
Embeds **process_exporter** to collect per-process metrics from `/proc`.
**Exports:** `targets`.
"""

"prometheus.exporter.redis" = """
**prometheus.exporter.redis**
Embeds **redis_exporter** to collect Redis metrics (including keyspace stats).
**Exports:** `targets`. **Common args:** redis URI(s), auth, TLS.
"""

"prometheus.exporter.self" = """
**prometheus.exporter.self**
Exports metrics about Alloy itself (health, component stats).
**Arguments:** none. **Exports:** `targets`.
"""

"prometheus.exporter.snmp" = """
**prometheus.exporter.snmp**
Embeds **snmp_exporter** (v0.29+ config). Collects SNMP data and exposes as Prometheus metrics.
**Common args:** `modules`, `walk`, SNMP v2c/v3 auth. **Exports:** `targets`.
"""

"prometheus.exporter.snowflake" = """
**prometheus.exporter.snowflake**
Embeds **snowflake-exporter** to expose Snowflake account/warehouse/session metrics.
**Exports:** `targets`. **Common args:** account/user/warehouse, key or password auth.
"""

"prometheus.exporter.squid" = """
**prometheus.exporter.squid**
Embeds **squid_exporter** to expose metrics from Squid proxy.
**Exports:** `targets`. **Common args:** Squid host/port, auth.
"""

"prometheus.exporter.statsd" = """
**prometheus.exporter.statsd**
Embeds **statsd_exporter** to accept StatsD metrics and convert them to Prometheus.
**Exports:** `targets`. Typically scrape the exporter while sending StatsD to its UDP/TCP port.
"""

"prometheus.exporter.unix" = """
**prometheus.exporter.unix**
Embeds **node_exporter** to expose hardware/OS metrics on Unix-like systems.
Toggle collectors with `enable_collectors` / `disable_collectors` / `set_collectors`.
**Exports:** `targets`.
"""

"prometheus.exporter.windows" = """
**prometheus.exporter.windows**
Embeds **windows_exporter** to expose hardware/OS metrics on Windows.
Toggle collectors; many require Administrator privileges.
**Exports:** `targets`.
"""

# ── Components (Loki / Logs) ──────────────────────────────────────────────────
"loki.source.file" = """
**loki.source.file**
Tails log files and forwards entries to `loki.*` components.
Use `local.file_match` for file discovery/globbing; each target must set `__path__`.
**Key attrs:** `targets`, `forward_to`, `tail_from_end`, optional decompression.
"""

"local.file_match" = """
**local.file_match**
Discovers files on the local filesystem using doublestar globs.
**Exports:** `targets` suitable for `loki.source.file` (labels like `__path__`, `__path_exclude__`).
**Key attrs:** `path_targets`, `sync_period`, `ignore_older_than`.
"""

"loki.source.journal" = """
**loki.source.journal**
Tails **systemd journal** entries and forwards to `loki.*` components.
May require adding the service user to `adm` and `systemd-journal` groups.
**Key attrs:** `forward_to`, `path`, `format_as_json`.
"""

"loki.source.docker" = """
**loki.source.docker**
Reads logs from Docker containers and forwards them to `loki.*` components.
**Key attrs:** `host`, `targets`, `forward_to`.
"""

"loki.source.kubernetes" = """
**loki.source.kubernetes**
Tails container logs via the Kubernetes API (no privileged DaemonSet required).
**Key attrs:** `targets` (pod refs), `forward_to`.
"""

"loki.source.podlogs" = """
**loki.source.podlogs**
Discovers `PodLogs` CRs on Kubernetes and tails matched pods via the API.
Uses CRs instead of passing `targets` in config. **Attr:** `forward_to`.
"""

"loki.process" = """
**loki.process**
Pipeline of **stages** to parse/transform/filter log entries (multiline, regex, labels, json, timestamp, drop, etc.).
Place between sources and writers. **Attrs:** repeated `stage` blocks, `forward_to`.
"""

"loki.relabel" = """
**loki.relabel**
Relabel log stream labels (keep/drop/replace/add). Works on log labels (not line content).
"""

"loki.write" = """
**loki.write**
Sends logs to Loki via the HTTP push API (`logproto`).
Configure one or more `endpoint { url = ... }` blocks; optional auth, TLS, and WAL.
**Exports:** `receiver` (use in `forward_to`). **Key attrs:** `external_labels`, `endpoint.*`, optional `wal`.
"""

# ── Components (OTel Collector in Alloy) ──────────────────────────────────────
"otelcol.receiver.otlp" = """
**otelcol.receiver.otlp**
Receives OTLP over gRPC and/or HTTP. Can require auth via `otelcol.auth.*` components.
**Key block:** `protocols { grpc {} http {} }`. **Exports:** inputs for processors/exporters.
"""

"otelcol.receiver.prometheus" = """
**otelcol.receiver.prometheus**
Accepts Prometheus metrics, converts to OTLP metrics, and forwards to `otelcol.*` pipelines.
"""

"otelcol.receiver.loki" = """
**otelcol.receiver.loki**
Accepts Loki log entries and converts them to OTLP logs for `otelcol.*` pipelines.
"""

"otelcol.receiver.jaeger" = """
**otelcol.receiver.jaeger**
Receives Jaeger-formatted traces (gRPC/Thrift/HTTP) and forwards as OTLP.
"""

"otelcol.receiver.kafka" = """
**otelcol.receiver.kafka**
Consumes telemetry from Kafka (supports multiple encodings incl. Jaeger/Zipkin for traces).
"""

"otelcol.receiver.influxdb" = """
**otelcol.receiver.influxdb**
Receives InfluxDB line protocol metrics and converts to OTLP metrics.
"""

"otelcol.processor.batch" = """
**otelcol.processor.batch**
Batches OTLP metrics/logs/traces to improve throughput. Often paired after groupby processors and before exporters.
"""

"otelcol.processor.attributes" = """
**otelcol.processor.attributes**
Add/update/remove attributes on spans/logs/metrics. Supports conditional matching.
"""

"otelcol.processor.filter" = """
**otelcol.processor.filter**
Drops telemetry based on **OTTL** expressions (e.g., drop debug logs or noisy spans).
"""

"otelcol.processor.groupbyattrs" = """
**otelcol.processor.groupbyattrs**
Groups telemetry by one or more resource/instrumentation attributes; pair with `otelcol.processor.batch`.
"""

"otelcol.exporter.otlp" = """
**otelcol.exporter.otlp**
Exports OTLP telemetry over **gRPC** to a backend (Tempo/Alloy/Collector/etc.).
**Key attrs:** `endpoint`, optional `headers`, `compression`, auth.
"""

"otelcol.exporter.otlphttp" = """
**otelcol.exporter.otlphttp**
Exports OTLP telemetry over **HTTP**. **Key attrs:** `endpoint`, `headers`, `compression`, auth.
"""

"otelcol.exporter.prometheus" = """
**otelcol.exporter.prometheus**
Converts OTLP metrics to Prometheus format and forwards to `prometheus.*` components.
"""

"otelcol.exporter.loki" = """
**otelcol.exporter.loki**
Converts OTLP logs to Loki entries and forwards to `loki.*` writers.
Supports special hint attributes to map OTLP attributes to Loki labels.
"""

"otelcol.exporter.kafka" = """
**otelcol.exporter.kafka**
Writes telemetry to Kafka topics (wrapper around upstream kafka exporter).
"""

"otelcol.exporter.debug" = """
**otelcol.exporter.debug**
(Experimental) Prints telemetry to stderr for troubleshooting. Control verbosity via settings.
"""

# ── Common attributes / concepts ──────────────────────────────────────────────
"targets" = """
**targets**
List/stream of target label-sets (maps) consumed by components (scrapers, log readers, etc.).
Special labels often used: `__address__`, `__path__`, `__metrics_path__`, `__scheme__`, `__param_<name>`.
"""

"forward_to" = """
**forward_to**
Connects the output of one component to the **receivers** of the next component(s).
Takes an array of component receiver exports (e.g., `[prometheus.remote_write.foo.receiver]`, `[loki.write.bar.receiver]`).
"""

"receiver" = """
**receiver (export)**
An exported input of a component that other components can send data to.
Examples: `loki.write.*.receiver`, `prometheus.remote_write.*.receiver`, many `otelcol.*` inputs.
"""

"endpoint" = """
**endpoint (block)**
Nested block describing a single remote destination (e.g., for `loki.write` or `prometheus.remote_write`).
Key attrs typically include `url`, optional auth (`basic_auth`, `oauth2`, `bearer_token(_file)`, `authorization`),
and connection settings (TLS, proxy, retries, backoff).
"""

"labels" = """
**labels**
Static labels to attach to metrics or logs (e.g., in scrapers or writers).
"""

"external_labels" = """
**external_labels**
Labels attached to all exported data (e.g., on `loki.write`, `prometheus.remote_write`) before send.
"""

"scrape_interval" = """
**scrape_interval**
Period between scrapes (e.g., `60s` by default for `prometheus.scrape`). Must be ≥ `scrape_timeout`.
"""

"scrape_timeout" = """
**scrape_timeout**
Per-target scrape timeout (default ~`10s` in `prometheus.scrape`). Should be < `scrape_interval`.
"""

"metrics_path" = """
**metrics_path**
HTTP path to scrape metrics from. Default is `/metrics` in `prometheus.scrape`.
"""

"scheme" = """
**scheme**
URL scheme to use when scraping (e.g., `http` or `https`).
"""

"params" = """
**params**
Extra query parameters appended to the scrape URL (e.g., for blackbox exporter).
"""

"bearer_token" = """
**bearer_token**
Secret token used for authentication. Mutually exclusive with `bearer_token_file` when both are supported.
"""

"basic_auth" = """
**basic_auth (block)**
Username/password authentication settings inside an `endpoint` (HTTP basic auth).
"""

"oauth2" = """
**oauth2 (block)**
Client credentials + token URL used to obtain a bearer token for requests.
"""

"tenant_id" = """
**tenant_id**
Tenant/Org ID header for multi-tenant backends (e.g., Loki). Often maps to `X-Scope-OrgID`.
"""

"relabel_rules" = """
**relabel_rules**
A set of rules applied to labels on log entries (Loki) or discovery targets (`discovery.relabel`).
"""

"wal" = """
**wal (block)**
Write-Ahead Log configuration (e.g., in `loki.write`) that persists outgoing data to disk for durability.
"""

# ── Helper examples / idioms ─────────────────────────────────────────────────
"relabel" = """
**relabel**
Rule-based transforms on label-sets. Common actions: `replace`, `keep`, `drop`, `labelmap`, `hashmod`, etc.
Used in `prometheus.relabel`, `loki.relabel`, and `discovery.relabel`.
"""

"match" = """
**match**
Filter records/series by label matchers or OTTL expressions (context-specific).
"""
